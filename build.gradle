buildscript {
  repositories {
    //maven {
    //  url 'https://oss.sonatype.org/content/repositories/snapshots/'
    //}
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.2.3'
    classpath('com.stanfy.spoon:spoon-gradle-plugin:1.0.3') {
      // Workaround for https://github.com/stanfy/spoon-gradle-plugin/issues/33
      exclude module: 'guava'
    }
    classpath 'com.google.guava:guava:18.0'
    classpath 'me.tatarka:gradle-retrolambda:3.2.5'
    classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
    classpath 'com.squareup.sqldelight:gradle-plugin:0.5.1'
  }

  // Exclude the lombok version that the android plugin depends on.
  configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

apply plugin: 'com.android.application'
apply plugin: 'spoon'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.squareup.sqldelight'

repositories {
  //maven {
  //  url 'https://oss.sonatype.org/content/repositories/snapshots/'
  //}
  mavenCentral()
}

def gitSha() {
  def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
  p.waitFor()
  if (p.exitValue() != 0) {
    throw new RuntimeException(p.errorStream.text)
  }

  return p.text.trim()
}

def gitTimestamp() {
  def p = 'git log -n 1 --format=%at'.execute([], rootDir)
  p.waitFor()
  if (p.exitValue() != 0) {
    throw new RuntimeException(p.errorStream.text)
  }

  return p.text.trim()
}

def isCi = "true".equals(System.getenv("CI"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
  compileSdkVersion 25
  buildToolsVersion '25.0.2'

  dexOptions {
    // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
    preDexLibraries = preDexEnabled && !isCi
  }

  signingConfigs {
    u2020 {
      storeFile file('u2020.keystore')
      storePassword 'android'
      keyAlias 'android'
      keyPassword 'android'
    }
  }

  defaultConfig {
    minSdkVersion 24
    targetSdkVersion 25
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    signingConfig signingConfigs.u2020
    buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
    buildConfigField 'long', 'GIT_TIMESTAMP', "${gitTimestamp()}L"
    testInstrumentationRunner 'com.holmes.PonderosaTestRunner'
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
    }
  }

  productFlavors {
    internal {
      applicationId 'com.holmes.ponderosa.internal'
    }
    production {
      applicationId 'com.holmes.ponderosa'
    }
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
    fatal 'UnusedResources'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/rxjava.properties'
  }
}

// TODO remove eventually: http://b.android.com/162285
configurations {
  internalDebugCompile
}

configurations.all {
  resolutionStrategy {
    force 'com.android.support:support-annotations:23.3.0'
  }
}

dependencies {
  compile 'com.android.support:support-v4:25.1.0'
  compile 'com.android.support:support-annotations:25.1.0'
  compile 'com.android.support:appcompat-v7:25.1.0'
  compile 'com.android.support:recyclerview-v7:25.1.0'
  compile 'com.android.support:design:25.1.0'
  compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'
  compile 'com.squareup.dagger:dagger:1.2.2'
  annotationProcessor 'com.squareup.dagger:dagger-compiler:1.2.2'
  compile 'com.squareup.okhttp3:okhttp:3.2.0'
  compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.0.1'
  compile 'com.squareup.retrofit2:retrofit:2.0.0'
  compile 'com.squareup.retrofit2:converter-moshi:2.0.0'
  compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
  internalDebugCompile 'com.squareup.retrofit2:retrofit-mock:2.0.0'
  compile 'com.jakewharton:butterknife:8.0.1'
  annotationProcessor 'com.jakewharton:butterknife-compiler:8.0.1'
  provided 'com.google.auto.value:auto-value:1.4-rc2'
  annotationProcessor 'com.google.auto.value:auto-value:1.4-rc2'
  compile 'com.jakewharton.timber:timber:4.0.1'
  compile 'com.jakewharton.byteunits:byteunits:0.9.1'
  compile "com.github.akarnokd:rxjava2-interop:0.8.3"
  compile 'com.jakewharton.rxbinding:rxbinding:1.0.0'
  compile 'io.reactivex.rxjava2:rxjava:2.0.4'
  compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
  compile 'com.f2prateek.rx.preferences2:rx-preferences:2.0.0-RC1'
  compile 'com.squareup.sqlbrite:sqlbrite:1.1.1'
  internalDebugCompile 'com.jakewharton.madge:madge:1.1.3'
  internalDebugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
  internalDebugCompile 'com.jakewharton:process-phoenix:1.0.2'
  internalCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
  productionCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
  compile 'com.jakewharton.threetenabp:threetenabp:1.0.2'
  internalCompile 'com.mattprecious.telescope:telescope:1.5.0@aar'
  retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.3.0'
  compile 'com.facebook.stetho:stetho:1.4.2'
  compile 'com.facebook.stetho:stetho-okhttp3:1.4.2'
  androidTestCompile 'junit:junit:4.12'
  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
  // TODO https://code.google.com/p/android-test-kit/issues/detail?id=157

  //androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2'
  androidTestCompile 'com.android.support.test:runner:0.4.1'
  androidTestCompile 'com.android.support.test:rules:0.4.1'
  androidTestCompile 'com.squareup.spoon:spoon-client:1.2.0'
  testCompile 'junit:junit:4.12'
  testCompile 'com.google.truth:truth:0.27'
}

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
  installAll.dependsOn(variant.install)
  // Ensure we end up in the same group as the other install tasks.
  installAll.group = variant.install.group
}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
  tasks.getByName('assemble').dependsOn variant.assemble
}
